name: Continuous-Intergration

on:
  push:
    branches: [ master, develop ]
jobs:
  build:
    name: Build and Pushing the Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: nodejs version
      id: version
      run: |
        PACKAGE_VERSION=$(jq -r .version package.json)
        echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
        aws-region: "us-west-2"

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push develop image to Amazon ECR
      id: build-develop-image
      if: ${{ github.ref == 'refs/heads/develop' }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: gft-strapi-consumer
      run: |
        # Build a docker container and push it to ECR
        git_hash=$(git rev-parse --short "$GITHUB_SHA")
        tag=${GITHUB_REF##*/}-${{steps.version.outputs.PACKAGE_VERSION}}-$git_hash
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$tag .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$tag
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$tag" >> $GITHUB_OUTPUT
  
    - name: Build, tag, and push develop image to Amazon ECR
      id: build-master-image
      if: ${{ github.ref == 'refs/heads/master' }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: gft-strapi-consumer
      run: |
        # Build a docker container and push it to ECR
        tag=${{steps.version.outputs.PACKAGE_VERSION}}
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$tag .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$tag
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$tag" >> $GITHUB_OUTPUT
    
    - name: echo
      run: |
        echo ${{steps.build-master-image.outputs.image}}
        echo ${{steps.build-develop-image.outputs.image}}

    - name: notify failure
      if: failure() && env.SLACK_WEBHOOK_URL != ''
      uses: slackapi/slack-github-action@v1.16.0
      with:
        payload: |
          {
            "blocks": [
                {   "type": "divider" },
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": ":red_circle: ${{ github.workflow }} failed\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}>"
                    }
                }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - name: notify success
      if: success() && env.SLACK_WEBHOOK_URL != ''
      uses: slackapi/slack-github-action@v1.16.0
      with:
        payload: |
          {
            "blocks": [
                {   "type": "divider" },
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": ":white_check_mark: ${{ github.workflow }} succeeded\n:whale: `Image Tag : ${{steps.build-master-image.outputs.image}} ${{steps.build-develop-image.outputs.image}}`\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}>"
                    }
                }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK